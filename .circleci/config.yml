# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: "Say hello"
          command: |
              echo "Hello, World!"
              COMMIT_MESSAGE=$(git log -1 --pretty=%B)
              echo "Commit Message: $COMMIT_MESSAGE"
          environment:
              GIT_COMMIT_DESC: $(git log --format=oneline -n 1 $CIRCLE_SHA1)
      - run:
          name: "Setup custom environment variables"
          command: echo 'export MY_ENV_VAR="FOO"' >> "$BASH_ENV"
      - run: # print the name of the branch we're on
          name: "What branch am I on?"
          command: echo ${CIRCLE_BRANCH}
      # Run another step, the same as above; note that you can
      # invoke environment variable without curly braces.
      - run:
          name: "What branch am I on now?"
          command: echo $CIRCLE_BRANCH
      - run:
          name: "What was my custom environment variable?"
          command: echo ${MY_ENV_VAR}
      - run:
          name: "Print an env var stored in the Project"
          command: echo ${PROJECT_ENV_VAR}
      - run:
          name: "Print an env var stored in a Context"
          command: echo ${CONTEXT_ENV_VAR}

  get_version_and_commit_message:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Get Latest Version Tag
          command: |
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "Latest tag: $LATEST_TAG"
            echo "LATEST_TAG=$LATEST_TAG" >> $BASH_ENV
      - run:
          name: Get Latest Commit Message
          command: |
            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
            echo "Latest commit message: $COMMIT_MESSAGE"
            echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $BASH_ENV
      - run:
          name: Create release tag
          command: |
            # Get the latest version and increment based on commit message
            is_not_number() {
              echo "$1" | grep -qEv '^[+-]?[0-9]+(\.[0-9]*)?$'
            }
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
            if is_not_number $MAJOR; then
              MAJOR=1
            fi
            if is_not_number $MINOR; then
              MINOR=0
            fi
            if is_not_number $PATCH; then
              PATCH=0
            fi

            if echo "$COMMIT_MESSAGE" | grep -q "\[MAJOR\]"; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif echo "$COMMIT_MESSAGE" | grep -q "\[MINOR\]"; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi

            echo "Version: $MAJOR.$MINOR.$PATCH"
            echo "NEW_VERSION=$$MAJOR.$MINOR.$PATCH" >> $BASH_ENV

  create_release:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Create Git Release
          command: |
            echo "Creating a release"
            REPO="vuong8/terraform-module-template"
            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
            RELEASE_NAME="Release $(date +%Y-%m-%d) $CIRCLE_SHA1"
            RELEASE_BODY="Release notes for $(date +%Y-%m-%d) \n $COMMIT_MESSAGE"

            # Create the release via GitHub API
            curl -X POST \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -d @- https://api.github.com/repos/$REPO/releases \<<EOF
            {
              "tag_name": "$NEW_VERSION",
              "name": "$RELEASE_NAME",
              "body": "$RELEASE_BODY",
              "draft": false,
              "prerelease": false
            }
            EOF
      - run:
          name: Verify Release
          command: |
            REPO="vuong8/terraform-module-template"
            curl -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$REPO/releases/tags/$TAG


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - say-hello:
          filters:
              branches:
                  only:
                    - main
                    - release
      - get_version_and_commit_message
      - create_release:
          requires:
            - get_version_and_commit_message
          filters:
              branches:
                  only:
                    - release